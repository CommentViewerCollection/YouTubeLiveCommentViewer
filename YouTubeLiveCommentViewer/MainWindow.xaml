<Window x:Class="YouTubeLiveCommentViewer.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:YouTubeLiveCommentViewer"
        xmlns:v="clr-namespace:YouTubeLiveCommentViewer.View"
        xmlns:vm="clr-namespace:YouTubeLiveCommentViewer.ViewModel"        
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:w="clr-namespace:Common.Wpf;assembly=Common"
        xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
        mc:Ignorable="d"
        DataContext="{Binding Main, Source={StaticResource Locator}}"
        d:DataContext="{d:DesignInstance vm:MainViewModel, IsDesignTimeCreatable=True}"
        Title="{Binding Title}" Height="{Binding Height, Mode=TwoWay}" Width="{Binding Width, Mode=TwoWay}"
        Topmost="{Binding Topmost}"
        Left="{Binding Left, Mode=TwoWay}" Top="{Binding Top, Mode=TwoWay}" Background="#FFF0F0F0">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="ContentRendered">
            <i:InvokeCommandAction Command="{Binding MainViewContentRenderedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <command:EventToCommand Command="{Binding MainViewClosingCommand}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <FrameworkElement x:Key="ProxyElement" DataContext="{Binding}"/>
        <w:NotConverter x:Key="notConverter" />
        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
        <w:IntToFontSizeConverter x:Key="intToFontConverter" />
        <w:DataGridLengthValueConverter x:Key="dataGridLengthConverter" />
        <w:MessageConverter x:Key="messageConverter" />
        <w:NameConverter x:Key="nameConverter" />
        <w:ThumbnailConverter x:Key="thumbnailConverter" />
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="20" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Menu Width="Auto" Height="20" Grid.Row="0">
            <MenuItem Header="ファイル">
                <Separator />
                <MenuItem Header="終了" Command="{Binding CloseCommand}" />
            </MenuItem>
            <MenuItem Header="表示">
                <MenuItem Header="放送情報" IsChecked="{Binding IsShowLiveInfo}" IsCheckable="True" />
            </MenuItem>
            <MenuItem Header="設定">
                <MenuItem Header="常に一番手前に表示" IsChecked="{Binding Topmost}" IsCheckable="True" />
                <MenuItem Header="オプション" Command="{Binding ShowOptionsWindowCommand}"/>
            </MenuItem>
            <MenuItem Header="プラグイン" ItemsSource="{Binding PluginMenuItemCollection}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Path=Name}" />
                        <Setter Property="Command" Value="{Binding Path=ShowSettingViewCommand}" />
                        <Setter Property="ItemsSource" Value="{Binding Path=Children}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="ヘルプ">
                <MenuItem Header="配布サイト" Command="{Binding ShowWebSiteCommand}" />
                <MenuItem Header="作者のTwitter" Command="{Binding ShowDevelopersTwitterCommand}" />
                <Separator />
                <MenuItem Header="アップデートを確認" Command="{Binding CheckUpdateCommand}" />
            </MenuItem>
        </Menu>
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="30" />
                <RowDefinition>
                    <RowDefinition.Style>
                        <Style TargetType="{x:Type RowDefinition}">
                            <Setter Property="Height" Value="0" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsShowLiveInfo}" Value="True">
                                    <Setter Property="Height" Value="50" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </RowDefinition.Style>
                </RowDefinition>
                <RowDefinition Height="*" />
                <RowDefinition Height="60" />
            </Grid.RowDefinitions>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="55" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="150" />
                    <ColumnDefinition Width="55" />
                    <ColumnDefinition Width="55" />
                </Grid.ColumnDefinitions>
                <Label Content="放送URL" Grid.Column="0" />
                <TextBox Text="{Binding Input, UpdateSourceTrigger=PropertyChanged}" Height="22" Grid.Column="1" />
                <ComboBox ItemsSource="{Binding BrowserCollection}" SelectedValue="{Binding SelectedBrowserViewModel, Mode=TwoWay}" DisplayMemberPath="DisplayName" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="5" Grid.Column="2" />
                <Button Content="接続" IsEnabled="{Binding CanConnect}" Command="{Binding ConnectCommand}"  HorizontalAlignment="Center" VerticalAlignment="Center" Width="43" Margin="5" Grid.Column="3"/>
                <Button Content="切断" IsEnabled="{Binding CanDisconnect}" Command="{Binding DisconnectCommand}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="35" Margin="5" Grid.Column="4"/>

            </Grid>
            <Grid Grid.Row="1">
                <Label x:Name="label" Content="同時視聴数" HorizontalAlignment="Left" Padding="0" Margin="10,28,0,0" VerticalAlignment="Top"/>
                <TextBlock Text="{Binding LiveViewers}" FontSize="14" Padding="0" Margin="80,28,307,0" />
                <!--<Label x:Name="label1" Content="累積視聴数" Padding="0" Margin="151,31,257,-4"/>
                <TextBlock Margin="225,31,178,-3" Padding="0" Text="{Binding Viewers}" />-->
                <TextBlock x:Name="textBlock" HorizontalAlignment="Left" Margin="11,6,0,0" TextWrapping="NoWrap" Text="{Binding LiveTitle}" FontSize="18" FontWeight="Bold" VerticalAlignment="Top"/>
            </Grid>
            <!--Element treeに属さないelementにDataContextを渡すためのdummy element-->
            <FrameworkElement x:Name="dummyElement" Visibility="Collapsed" DataContext="{Binding}"/>
            <DataGrid x:Name="dataGrid" ItemsSource="{Binding Comments, IsAsync=True}"
                      AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"                      
                      CanUserReorderColumns="True"
                      CanUserResizeColumns="True"
                      CanUserResizeRows="True"
                      CanUserSortColumns="False"    
                      HeadersVisibility="All"
                      RowHeaderWidth="0"
                      SelectionUnit="FullRow"
                      SelectionMode="Single"
                      EnableColumnVirtualization="True"
                      EnableRowVirtualization="True"                      
                      VirtualizingStackPanel.IsVirtualizing="True"
                      VirtualizingStackPanel.VirtualizationMode="Recycling"
                      VirtualizingStackPanel.ScrollUnit="{Binding ScrollUnit}"
                      GridLinesVisibility="All"
                      HorizontalGridLinesBrush="{Binding HorizontalGridLineBrush}"
                      VerticalGridLinesBrush="{Binding VerticalGridLineBrush}"
                      VerticalScrollBarVisibility="Visible"
                      ScrollViewer.CanContentScroll="True"
                      ScrollViewer.ScrollChanged="dataGrid_ScrollChanged"                      
                      Margin="5" Grid.Row="2">
                <DataGrid.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{Binding SelectedRowBackColor}"/>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{Binding SelectedRowForeColor}" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{Binding SelectedRowBackColor}"/>
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{Binding SelectedRowForeColor}"/>
                    <ContextMenu x:Key="commentContext" DataContext="{Binding}">
                        <MenuItem Header="コメントをコピー" Command="{Binding CommentCopyCommand}" />
                        <MenuItem Header="URLを開く" IsEnabled="{Binding ContainsUrl}" Command="{Binding OpenUrlCommand}" />
                        <!--<Separator />
                        <MenuItem Header="ユーザページを開く" Command="{Binding OpenUserPageCommand}" />-->
                    </ContextMenu>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="FontFamily" Value="{Binding FontFamily}" />
                        <Setter Property="FontStyle" Value="{Binding FontStyle}" />
                        <Setter Property="FontWeight" Value="{Binding FontWeight}" />
                        <Setter Property="FontSize" Value="{Binding FontSize, Converter={StaticResource intToFontConverter}}"/>
                        <Setter Property="Background" Value="{Binding Background}" />
                        <Setter Property="Foreground" Value="{Binding Foreground}" />
                        <Setter Property="ContextMenu" Value="{StaticResource commentContext}" />
                        <Setter Property="BorderBrush" Value="{Binding Background}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsVisible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="{x:Type DataGridCell}">
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    </Style>
                    <ContextMenu x:Key="listViewHeaderContext" DataContext="{Binding DataContext, Source={x:Reference dummyElement}}">
                        <MenuItem Header="サムネ" IsChecked="{Binding IsShowThumbnail, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="ユーザ名" IsChecked="{Binding IsShowUsername, Mode=TwoWay}" IsCheckable="True" />
                        <MenuItem Header="ユーザID" IsChecked="{Binding IsShowUserId, Mode=TwoWay}" IsCheckable="True" />
                        <!--<MenuItem Header="コメ番" IsChecked="{Binding IsShowNum, Mode=TwoWay}" IsCheckable="True" />-->
                        <MenuItem Header="投稿時間" IsChecked="{Binding IsShowPostTime, Mode=TwoWay}" IsCheckable="True" />
                        <!--<MenuItem Header="経過時間" IsChecked="{Binding IsShowPostElapsed, Mode=TwoWay}" IsCheckable="True" />-->
                    </ContextMenu>
                    <Style TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="ContextMenu" Value="{StaticResource listViewHeaderContext}" />
                    </Style>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTemplateColumn Header="ｻﾑﾈ" 
                                            DisplayIndex="{Binding DataContext.ThumbnailDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=0}"
                                            Width="{Binding DataContext.ThumbnailWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            Visibility="{Binding DataContext.IsShowThumbnail, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <w:BindableTextBlock TextWrapping="NoWrap" InlineList="{Binding Thumbnail, Converter={StaticResource thumbnailConverter}}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="ユーザ名" 
                                            DisplayIndex="{Binding DataContext.UsernameDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=1}"
                                            Visibility="{Binding DataContext.IsShowUsername, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                                            Width="{Binding DataContext.UsernameWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <w:BindableTextBlock TextWrapping="{Binding UserNameWrapping, Mode=OneWay}" InlineList="{Binding NameItems, Converter={StaticResource nameConverter}}"
                                                  Margin="5,0" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="ユーザID" 
                                            DisplayIndex="{Binding DataContext.UserIdDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=2}"
                                            Visibility="{Binding DataContext.IsShowUserId, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                                            Width="{Binding DataContext.UserIdWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding UserId}" TextWrapping="{Binding UserIdWrapping}" Margin="5,0,5,0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="コメント"
                                            DisplayIndex="{Binding DataContext.MessageDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=3}"
                                            Visibility="Visible"
                                            Width="{Binding DataContext.MessageWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <w:BindableTextBlock TextWrapping="Wrap"
                                                  InlineList="{Binding MessageItems, Converter={StaticResource messageConverter}, ConverterParameter=true}" Padding="5,0" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="投稿時間" 
                                            DisplayIndex="{Binding DataContext.PostTimeDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=4}"
                                            Visibility="{Binding DataContext.IsShowPostTime, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                                            Width="{Binding DataContext.PostTimeWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding PostTime}" TextWrapping="NoWrap" Margin="5,0,5,0"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
            <Grid x:Name="PostCommentPanelPlaceHolder" Grid.Row="3" Margin="5" />
        </Grid>
    </Grid>
</Window>